// Import fixed colors to used throughout the pages
@import "../../global/colors.less";
@import "../../global/keyframes.less";
@import (reference) "../../global/methods.less";
@import (reference) '../../global/namespace.less';

#globalNS > .html();
#globalNS > .navigation();
#globalNS > .bg_canvas();
#globalNS > .bg_img();

/*  Rest of the styling goes here */
h2 {
	.format(relative,10rem);
	text-align: center;
	color: @textColor;
	margin:auto;

	&#pageHeader {
		margin-top:5rem;
		font-size:2rem;
	}
	&#pricingHeader, &#pricingChartHeader {
		margin-top:3.5rem;
		font-size: 1.65rem;
	}
}
p#intro {
	.format(relative, 50rem);
	text-align:center;
	color: @textColor;
	margin:3.5rem auto;

	&::first-line {
		text-indent:3rem;
	}
}
hr {
	.format(relative, 75%);
	margin-top: 2.5rem;
	border: 1px solid @accentColor;
}
div#pricingChartCont {
	.format(relative,90%);
	margin:auto;
	margin-top:2.5rem;
	z-index: 1;

	& > div#selectionsCont {
		.format(relative,50%);
		display:inline-block;

		& > div.selectionCont {
			.format(relative,100%,15rem);

			& > .selectionHeader {
				.format(relative,100%);
				text-align:left;
				text-indent:6.5rem;
				padding-bottom:1rem;
			}
			& > div[class $= "Row"] {
				.format(relative,80%);
				text-align: center;
				margin:auto;
				margin-bottom:2.5rem;

				&:hover {
					cursor: pointer;
				}
				& > input[type="radio"] {
				  visibility:hidden;

				  	&:checked + label + div.customRadioBtnCont {

				  		& > span.innerCircle {
					  		background-color:white;	
				  		}
				  		& > span.rotatingWhitePiece {
							animation-name: circle;
				  		}
				  		& > span.whitePieceMask {
							transform:rotateZ(45deg);	
				  		}
				  		& > span.whiteFiller {
							border-top: 2px solid white;
							border-right: 2px solid white;
							border-bottom: 2px solid white;
							border-left: 2px solid white;
				  		}
				  	}
				}
				& > label {
					margin-left:-2rem;
					width: 20rem;
					z-index:1;
					&:hover {
						cursor:pointer;
					}

					/*	White inner small circle	*/
					& + div.customRadioBtnCont {
						position:absolute;
						display:inline-block;
						border: 2px solid rgba(222, 87, 87, 1);
						border-radius: 50%;
					    left:8.2rem;
					    width:18px;
					    height:18px;

						& > span.innerCircle {
							position:absolute;
						    left:4px;
						    top:4px;
							display:inline-block;
						    margin-right:20px;
						    width:10px;
						    height:10px;
						    content:"";
	    					border-radius: 50%;
						}
						& > span.rotatingWhitePiece {
							position:absolute;
						    left:-2px;
						    top:-2px;
							display:inline-block;
						    visibility:visible;
						    margin-right:20px;
						    width:18px;
						    height:18px;
						    content:"";
						    animation-duration: 1s;
						    animation-iteration-count:1;
						    animation-timing-function:linear;
						    border: 2px solid rgba(222,87,87,0);
						    border-radius: 50%;
						}
				    	/*	Red slice acting as initial mask for white slice 	*/
						& > span.whitePieceMask {
							display:inline-block;
						    position:absolute;
						    content:"";
						    left:-2px;
						    top:-2px;
						    width: inherit;
						    height: inherit;
						    transform:rotateZ(-45deg);
						    border: 2px solid rgba(255,255,255,0);
						    border-top: 2px solid #de5757;
						    border-radius: 50%;
						    transition:transform 0.25s linear 0.75s;
						}
				    	/*	White solid border that displays after white single border has rotated passed position: */
				    	// Possibly changed whiteFiller from transition to animation to change fill mode
						& > span.whiteFiller {	
							display:inline-block;
						    position:absolute;
						    content:"";
						    margin-right:20px;
						    left:-2px;
						    top:-2px;
						    width:inherit;
						    height:inherit;
						    transform: rotateZ(45deg);
						    border: 2px solid rgba(222,87,87,0);
						    border-radius: 50%;
						    transition:border-top 0s linear 0.25s, border-right 0s linear 0.5s, border-bottom 0s linear 0.75s, border-left 0s linear 1s;
						}
					}
				}
			}
		}
	}
	& > div#chartCont {
		.format(relative,45%,inherit);
		display:inline-block;
		float:right;
		top:0;

		/*  Chart table   */
		& > table {
			.format(relative,35rem);
			margin:auto;
			margin-top:1rem;
			color:white;
			border-collapse:collapse;

			thead, tbody {
				width: inherit;
			}
			& th {
				border-bottom:3px solid @accentColor;
				font-size:1.45rem;
				text-align:center;
				padding-top:1rem;
				padding-bottom:0.75rem;
				width:33.33%;
			}
			& td {
				text-align:center;
				font-size:1.2rem;
				padding-top:1rem;
				padding-bottom:0.75rem;
			}
		}
	}
}
div#progressCont {
	.format(relative, 60rem, 7rem);
	margin:auto;
	margin-top: 2.5rem;

	& > div.circleCont {
		.format(inherit, 5rem, 100%);
		display: inline-block;
		margin:0 2.5rem;

		& > p {
			.format(absolute, 100%, 1rem);
			color: @textColor;
			text-align: center;
		}
		& > canvas.progressCircle {
			.format(absolute, inherit);
			left: 0px;
			bottom: 0px;
			z-index:1;
		}
		& > div.rectCont {
			.format(absolute, 8rem, 1.5rem);
			left: 3.5rem;
			bottom:0.5rem;
			z-index:0;

			& > canvas {
				.format(absolute, inherit, inherit);
			}
			& > div.whiteProgressRect {
				.format(absolute, inherit, 0.5rem);
				background-color:white;
				margin-top:0.5rem;
			}
		}
	}
}
button {
	position:relative;
	z-index:3;
}
form#inputRowsCont {
	.format(relative, 75%);
	margin:5rem auto 10rem auto;
	z-index:2;
}
div[class $= "Row"] {
	margin-top: 5rem;

	& > i {
		display:inline;
		font-size:1.5rem;
		color:@accentColor;
	}
	& > label {
		.format(relative,15rem);
		display: inline-block;
		padding-left:2.5rem;
		font-size:1.25rem;
		text-align: center;
		color: @textColor;
		font-weight:bold;
	}
	& > div[class $= "Cont"]{
		.format(absolute, 12.5rem, 1.75rem);
		display:inline;
		margin:auto;
		left:50%;
		transform: translateX(-50%);

		& > [class $= "Element"] {
			.inputMixin(inherit);
		}
		& > input[type="datetime-local"] {
			.inputMixin(initial)
		}
	}
}
.inputMixin(@width) {
	.format(relative, @width, inherit);
	font-family: Arial;
	font-size:1rem;
	border-width:1px;
	padding:0px;
	padding-left: 10px;

	&:focus {
		outline: none;
	}
}
// Submit container needs to be given explicit height
.submitRow {
	height:5rem;

	#submitCont {
		height:inherit;
		width:8.1rem;

		#sending_img {
			display:block;
			margin-top:-13px;
			width:7rem;
		}
		#formMessage {
			position: absolute;
			color:@textColor;
			text-align: center;
			width:100%;
			bottom:0;
			left:50%;
			transform: translateX(-50%);
		}
		input[type = "button"] {
			background-color:@accentColor;
			font-size:1rem;
			border:none;
			color:@textColor;
			border-radius:5px;
			display:block;
			padding:10px 40px;

			&:focus {
				outline: 0;
				background-color: @buttonHoverColor;
			}
			&:hover {
				background-color:@buttonHoverColor;
				cursor:pointer;	
			}
		}
	}
}

#globalNS > .social();